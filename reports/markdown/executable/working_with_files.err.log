Traceback (most recent call last):
  File "/usr/share/miniconda3/envs/test/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/share/miniconda3/envs/test/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda3/envs/test/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda3/envs/test/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda3/envs/test/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/share/miniconda3/envs/test/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda3/envs/test/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda3/envs/test/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import dascore
from dascore import examples as ex

# Get a directory with several files
diverse_spool = dascore.get_example_spool('diverse_das')
path = ex.spool_to_directory(diverse_spool)

# Create a spool for interacting with the files in the directory.
spool = (
    dascore.get_spool(path)
    .select(network='das2')  # sub-select das2 network
    .select(time=(None, '2022-01-01'))  # unselect anything after 2022
    .chunk(time=2, overlap=0.5)  # change the chunking of the patches
)

# Iterate each patch and do something with it
for patch in spool:
    ...
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<cell line: 10>[0;34m()[0m
[1;32m      6[0m path [38;5;241m=[39m ex[38;5;241m.[39mspool_to_directory(diverse_spool)
[1;32m      8[0m [38;5;66;03m# Create a spool for interacting with the files in the directory.[39;00m
[1;32m      9[0m spool [38;5;241m=[39m (
[0;32m---> 10[0m     [43mdascore[49m[38;5;241;43m.[39;49m[43mget_spool[49m[43m([49m[43mpath[49m[43m)[49m
[1;32m     11[0m [43m    [49m[38;5;241;43m.[39;49m[43mselect[49m[43m([49m[43mnetwork[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mdas2[39;49m[38;5;124;43m'[39;49m[43m)[49m[43m  [49m[38;5;66;43;03m# sub-select das2 network[39;49;00m
[1;32m     12[0m [43m    [49m[38;5;241;43m.[39;49m[43mselect[49m[43m([49m[43mtime[49m[38;5;241;43m=[39;49m[43m([49m[38;5;28;43;01mNone[39;49;00m[43m,[49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43m2022-01-01[39;49m[38;5;124;43m'[39;49m[43m)[49m[43m)[49m[43m  [49m[38;5;66;43;03m# unselect anything after 2022[39;49;00m
[1;32m     13[0m [43m    [49m[38;5;241;43m.[39;49m[43mchunk[49m[43m([49m[43mtime[49m[38;5;241;43m=[39;49m[38;5;241;43m2[39;49m[43m,[49m[43m [49m[43moverlap[49m[38;5;241;43m=[39;49m[38;5;241;43m0.5[39;49m[43m)[49m  [38;5;66;03m# change the chunking of the patches[39;00m
[1;32m     14[0m )
[1;32m     16[0m [38;5;66;03m# Iterate each patch and do something with it[39;00m
[1;32m     17[0m [38;5;28;01mfor[39;00m patch [38;5;129;01min[39;00m spool:

File [0;32m~/work/dascore/dascore/dascore/core/spool.py:219[0m, in [0;36mDataFrameSpool.chunk[0;34m(self, overlap, keep_partial, **kwargs)[0m
[1;32m    209[0m [38;5;129m@compose_docstring[39m(doc[38;5;241m=[39mBaseSpool[38;5;241m.[39mchunk[38;5;241m.[39m[38;5;18m__doc__[39m)
[1;32m    210[0m [38;5;28;01mdef[39;00m [38;5;21mchunk[39m(
[1;32m    211[0m     [38;5;28mself[39m: SpoolType,
[0;32m   (...)[0m
[1;32m    214[0m     [38;5;241m*[39m[38;5;241m*[39mkwargs,
[1;32m    215[0m ) [38;5;241m-[39m[38;5;241m>[39m Self:
[1;32m    216[0m     [38;5;124;03m"""[39;00m
[1;32m    217[0m [38;5;124;03m    {doc}[39;00m
[1;32m    218[0m [38;5;124;03m    """[39;00m
[0;32m--> 219[0m     df [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_df[49m[38;5;241m.[39mdrop(columns[38;5;241m=[39m[38;5;28mlist[39m([38;5;28mself[39m[38;5;241m.[39m_drop_columns), errors[38;5;241m=[39m[38;5;124m"[39m[38;5;124mignore[39m[38;5;124m"[39m)
[1;32m    220[0m     chunker [38;5;241m=[39m ChunkManager(
[1;32m    221[0m         overlap[38;5;241m=[39moverlap,
[1;32m    222[0m         keep_partial[38;5;241m=[39mkeep_partial,
[1;32m    223[0m         group_columns[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_group_columns,
[1;32m    224[0m         [38;5;241m*[39m[38;5;241m*[39mkwargs,
[1;32m    225[0m     )
[1;32m    226[0m     in_df, out_df [38;5;241m=[39m chunker[38;5;241m.[39mchunk(df)

File [0;32m~/work/dascore/dascore/dascore/utils/misc.py:265[0m, in [0;36mCacheDescriptor.__get__[0;34m(self, instance, owner)[0m
[1;32m    263[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_name [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m cache:
[1;32m    264[0m     func [38;5;241m=[39m [38;5;28mgetattr[39m(instance, [38;5;28mself[39m[38;5;241m.[39m_func_name)
[0;32m--> 265[0m     out [38;5;241m=[39m [43mfunc[49m[43m([49m[38;5;241;43m*[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_args[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_kwargs[49m[43m)[49m
[1;32m    266[0m     cache[[38;5;28mself[39m[38;5;241m.[39m_name] [38;5;241m=[39m out
[1;32m    267[0m [38;5;28;01mreturn[39;00m cache[[38;5;28mself[39m[38;5;241m.[39m_name]

File [0;32m~/work/dascore/dascore/dascore/clients/filespool.py:60[0m, in [0;36mFileSpool._get_df[0;34m(self)[0m
[1;32m     58[0m [38;5;124;03m"""Get the dataframe of current contents."""[39;00m
[1;32m     59[0m index_contents [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mindexer([38;5;241m*[39m[38;5;241m*[39m[38;5;28mself[39m[38;5;241m.[39m_select_kwargs)
[0;32m---> 60[0m out [38;5;241m=[39m [43madjust_segments[49m[43m([49m[43mindex_contents[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_select_kwargs[49m[43m)[49m
[1;32m     61[0m [38;5;28;01mreturn[39;00m out

File [0;32m~/work/dascore/dascore/dascore/utils/pd.py:236[0m, in [0;36madjust_segments[0;34m(df, ignore_bad_kwargs, **kwargs)[0m
[1;32m    223[0m [38;5;124;03m"""[39;00m
[1;32m    224[0m [38;5;124;03mFilter a dataframe and adjust its limits.[39;00m
[1;32m    225[0m 
[0;32m   (...)[0m
[1;32m    233[0m [38;5;124;03m    The keyword arguments for filtering.[39;00m
[1;32m    234[0m [38;5;124;03m"""[39;00m
[1;32m    235[0m [38;5;66;03m# apply filtering[39;00m
[0;32m--> 236[0m out [38;5;241m=[39m df[[43mfilter_df[49m[43m([49m[43mdf[49m[43m,[49m[43m [49m[43mignore_bad_kwargs[49m[38;5;241;43m=[39;49m[43mignore_bad_kwargs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m]
[1;32m    237[0m [38;5;66;03m# find slice kwargs, get series corresponding to interval columns[39;00m
[1;32m    238[0m [38;5;28;01mtry[39;00m:

File [0;32m~/work/dascore/dascore/dascore/utils/pd.py:279[0m, in [0;36mfilter_df[0;34m(df, ignore_bad_kwargs, **kwargs)[0m
[1;32m    277[0m min_max_query [38;5;241m=[39m _convert_times(df, _get_min_max_query(kwargs, df))
[1;32m    278[0m range_query [38;5;241m=[39m _add_range_query(kwargs, df, ignore_bad_kwargs)
[0;32m--> 279[0m multicolumn_range_query [38;5;241m=[39m [43m_convert_times[49m[43m([49m[43mdf[49m[43m,[49m[43m [49m[43mrange_query[49m[43m)[49m
[1;32m    280[0m equality_query, collection_query [38;5;241m=[39m _get_flat_and_collection_queries(kwargs)
[1;32m    281[0m [38;5;66;03m# get a blank index of True for filters[39;00m

File [0;32m~/work/dascore/dascore/dascore/utils/pd.py:157[0m, in [0;36m_convert_times[0;34m(df, some_dict)[0m
[1;32m    153[0m datetime_keys [38;5;241m=[39m (datetime_cols [38;5;241m&[39m [38;5;28mset[39m(some_dict)) [38;5;241m|[39m (
[1;32m    154[0m     non_min_max_cols [38;5;241m&[39m [38;5;28mset[39m(some_dict)
[1;32m    155[0m )
[1;32m    156[0m [38;5;28;01mfor[39;00m key [38;5;129;01min[39;00m datetime_keys:
[0;32m--> 157[0m     some_dict[key] [38;5;241m=[39m [43mto_datetime64[49m[43m([49m[43msome_dict[49m[43m[[49m[43mkey[49m[43m][49m[43m)[49m
[1;32m    158[0m [38;5;66;03m# convert queries related to time delta into timedelta64[39;00m
[1;32m    159[0m timedelta_cols [38;5;241m=[39m [38;5;28mset[39m(df[38;5;241m.[39mselect_dtypes(include[38;5;241m=[39mnp[38;5;241m.[39mtimedelta64)[38;5;241m.[39mcolumns)

File [0;32m/usr/share/miniconda3/envs/test/lib/python3.9/functools.py:888[0m, in [0;36msingledispatch.<locals>.wrapper[0;34m(*args, **kw)[0m
[1;32m    884[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m args:
[1;32m    885[0m     [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m([38;5;124mf[39m[38;5;124m'[39m[38;5;132;01m{[39;00mfuncname[38;5;132;01m}[39;00m[38;5;124m requires at least [39m[38;5;124m'[39m
[1;32m    886[0m                     [38;5;124m'[39m[38;5;124m1 positional argument[39m[38;5;124m'[39m)
[0;32m--> 888[0m [38;5;28;01mreturn[39;00m [43mdispatch[49m[43m([49m[43margs[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[38;5;241;43m.[39;49m[38;5;18;43m__class__[39;49m[43m)[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkw[49m[43m)[49m

File [0;32m~/work/dascore/dascore/dascore/utils/time.py:54[0m, in [0;36marray_to_datetime64[0;34m(array)[0m
[1;32m     51[0m array[nans] [38;5;241m=[39m [38;5;241m0[39m  [38;5;66;03m# temporary replace NaNs[39;00m
[1;32m     52[0m [38;5;28;01mtry[39;00m:
[1;32m     53[0m     [38;5;66;03m# separate seconds and factions, assume ns precision[39;00m
[0;32m---> 54[0m     int_sec [38;5;241m=[39m [43marray[49m[38;5;241;43m.[39;49m[43mastype[49m[43m([49m[43mnp[49m[38;5;241;43m.[39;49m[43mint64[49m[43m)[49m[38;5;241m.[39mastype([38;5;124m"[39m[38;5;124mdatetime64[s][39m[38;5;124m"[39m)
[1;32m     55[0m [38;5;28;01mexcept[39;00m [38;5;167;01mTypeError[39;00m:
[1;32m     56[0m     out [38;5;241m=[39m np[38;5;241m.[39marray([to_datetime64(x) [38;5;28;01mfor[39;00m x [38;5;129;01min[39;00m array])

[0;31mValueError[0m: invalid literal for int() with base 10: '2022-01-01'
ValueError: invalid literal for int() with base 10: '2022-01-01'

